// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "client.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



STI::Client_Server::ClientBootstrap_ptr STI::Client_Server::ClientBootstrap_Helper::_nil() {
  return ::STI::Client_Server::ClientBootstrap::_nil();
}

::CORBA::Boolean STI::Client_Server::ClientBootstrap_Helper::is_nil(::STI::Client_Server::ClientBootstrap_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::ClientBootstrap_Helper::release(::STI::Client_Server::ClientBootstrap_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::ClientBootstrap_Helper::marshalObjRef(::STI::Client_Server::ClientBootstrap_ptr obj, cdrStream& s) {
  ::STI::Client_Server::ClientBootstrap::_marshalObjRef(obj, s);
}

STI::Client_Server::ClientBootstrap_ptr STI::Client_Server::ClientBootstrap_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::ClientBootstrap::_unmarshalObjRef(s);
}

void STI::Client_Server::ClientBootstrap_Helper::duplicate(::STI::Client_Server::ClientBootstrap_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::ClientBootstrap_ptr
STI::Client_Server::ClientBootstrap::_duplicate(::STI::Client_Server::ClientBootstrap_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::ClientBootstrap_ptr
STI::Client_Server::ClientBootstrap::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::ClientBootstrap_ptr
STI::Client_Server::ClientBootstrap::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::ClientBootstrap_ptr
STI::Client_Server::ClientBootstrap::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ClientBootstrap _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ClientBootstrap* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ClientBootstrap;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::ClientBootstrap::_PD_repoId = "IDL:STI/Client_Server/ClientBootstrap:1.0";


STI::Client_Server::_objref_ClientBootstrap::~_objref_ClientBootstrap() {
  
}


STI::Client_Server::_objref_ClientBootstrap::_objref_ClientBootstrap(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::ClientBootstrap::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_ClientBootstrap::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::ClientBootstrap::_PD_repoId)
    return (::STI::Client_Server::ClientBootstrap_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::ClientBootstrap::_PD_repoId))
    return (::STI::Client_Server::ClientBootstrap_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::ClientBootstrap::connect

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI_mPusher_mServerEventHandler
class _0RL_cd_a900cfa937059cb8_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Pusher::ServerEventHandler_var arg_0_;
  STI::Pusher::ServerEventHandler_ptr arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_00000000::marshalArguments(cdrStream& _n)
{
  STI::Pusher::ServerEventHandler::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_a900cfa937059cb8_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = STI::Pusher::ServerEventHandler::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_00000000* tcd = (_0RL_cd_a900cfa937059cb8_00000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->connect(tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_ClientBootstrap::connect(::STI::Pusher::ServerEventHandler_ptr eventHandler)
{
  _0RL_cd_a900cfa937059cb8_00000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_10000000, "connect", 8);
  _call_desc.arg_0 = eventHandler;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ClientBootstrap::getModeHandler

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mClient__Server_mModeHandler
class _0RL_cd_a900cfa937059cb8_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Client_Server::ModeHandler_var result;
};

void _0RL_cd_a900cfa937059cb8_20000000::marshalReturnedValues(cdrStream& _n)
{
  STI::Client_Server::ModeHandler_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_a900cfa937059cb8_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI::Client_Server::ModeHandler_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_a900cfa937059cb8_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_20000000* tcd = (_0RL_cd_a900cfa937059cb8_20000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->getModeHandler();


}

STI::Client_Server::ModeHandler_ptr STI::Client_Server::_objref_ClientBootstrap::getModeHandler()
{
  _0RL_cd_a900cfa937059cb8_20000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_30000000, "getModeHandler", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ClientBootstrap::getParser

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mClient__Server_mParser
class _0RL_cd_a900cfa937059cb8_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Client_Server::Parser_var result;
};

void _0RL_cd_a900cfa937059cb8_40000000::marshalReturnedValues(cdrStream& _n)
{
  STI::Client_Server::Parser_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_a900cfa937059cb8_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI::Client_Server::Parser_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_a900cfa937059cb8_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_40000000* tcd = (_0RL_cd_a900cfa937059cb8_40000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->getParser();


}

STI::Client_Server::Parser_ptr STI::Client_Server::_objref_ClientBootstrap::getParser()
{
  _0RL_cd_a900cfa937059cb8_40000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_50000000, "getParser", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ClientBootstrap::getExpSequence

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mClient__Server_mExpSequence
class _0RL_cd_a900cfa937059cb8_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Client_Server::ExpSequence_var result;
};

void _0RL_cd_a900cfa937059cb8_60000000::marshalReturnedValues(cdrStream& _n)
{
  STI::Client_Server::ExpSequence_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_a900cfa937059cb8_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI::Client_Server::ExpSequence_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_a900cfa937059cb8_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_60000000* tcd = (_0RL_cd_a900cfa937059cb8_60000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->getExpSequence();


}

STI::Client_Server::ExpSequence_ptr STI::Client_Server::_objref_ClientBootstrap::getExpSequence()
{
  _0RL_cd_a900cfa937059cb8_60000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_70000000, "getExpSequence", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ClientBootstrap::getServerTimingSeqControl

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mClient__Server_mServerTimingSeqControl
class _0RL_cd_a900cfa937059cb8_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_80000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Client_Server::ServerTimingSeqControl_var result;
};

void _0RL_cd_a900cfa937059cb8_80000000::marshalReturnedValues(cdrStream& _n)
{
  STI::Client_Server::ServerTimingSeqControl_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_a900cfa937059cb8_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI::Client_Server::ServerTimingSeqControl_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_a900cfa937059cb8_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_80000000* tcd = (_0RL_cd_a900cfa937059cb8_80000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->getServerTimingSeqControl();


}

STI::Client_Server::ServerTimingSeqControl_ptr STI::Client_Server::_objref_ClientBootstrap::getServerTimingSeqControl()
{
  _0RL_cd_a900cfa937059cb8_80000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_90000000, "getServerTimingSeqControl", 26);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ClientBootstrap::getRegisteredDevices

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mClient__Server_mRegisteredDevices
class _0RL_cd_a900cfa937059cb8_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_a0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Client_Server::RegisteredDevices_var result;
};

void _0RL_cd_a900cfa937059cb8_a0000000::marshalReturnedValues(cdrStream& _n)
{
  STI::Client_Server::RegisteredDevices_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_a900cfa937059cb8_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI::Client_Server::RegisteredDevices_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_a900cfa937059cb8_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a0000000* tcd = (_0RL_cd_a900cfa937059cb8_a0000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->getRegisteredDevices();


}

STI::Client_Server::RegisteredDevices_ptr STI::Client_Server::_objref_ClientBootstrap::getRegisteredDevices()
{
  _0RL_cd_a900cfa937059cb8_a0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b0000000, "getRegisteredDevices", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ClientBootstrap::getServerCommandLine

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mClient__Server_mServerCommandLine
class _0RL_cd_a900cfa937059cb8_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_c0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Client_Server::ServerCommandLine_var result;
};

void _0RL_cd_a900cfa937059cb8_c0000000::marshalReturnedValues(cdrStream& _n)
{
  STI::Client_Server::ServerCommandLine_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_a900cfa937059cb8_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = STI::Client_Server::ServerCommandLine_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_a900cfa937059cb8_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_c0000000* tcd = (_0RL_cd_a900cfa937059cb8_c0000000*)cd;
  STI::Client_Server::_impl_ClientBootstrap* impl = (STI::Client_Server::_impl_ClientBootstrap*) svnt->_ptrToInterface(STI::Client_Server::ClientBootstrap::_PD_repoId);
  tcd->result = impl->getServerCommandLine();


}

STI::Client_Server::ServerCommandLine_ptr STI::Client_Server::_objref_ClientBootstrap::getServerCommandLine()
{
  _0RL_cd_a900cfa937059cb8_c0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d0000000, "getServerCommandLine", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}

STI::Client_Server::_pof_ClientBootstrap::~_pof_ClientBootstrap() {}


omniObjRef*
STI::Client_Server::_pof_ClientBootstrap::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_ClientBootstrap(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_ClientBootstrap::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::ClientBootstrap::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_ClientBootstrap _the_pof_STI_mClient__Server_mClientBootstrap;

STI::Client_Server::_impl_ClientBootstrap::~_impl_ClientBootstrap() {}


::CORBA::Boolean
STI::Client_Server::_impl_ClientBootstrap::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "connect")) {

    _0RL_cd_a900cfa937059cb8_00000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_10000000, "connect", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getModeHandler")) {

    _0RL_cd_a900cfa937059cb8_20000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_30000000, "getModeHandler", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getParser")) {

    _0RL_cd_a900cfa937059cb8_40000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_50000000, "getParser", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getExpSequence")) {

    _0RL_cd_a900cfa937059cb8_60000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_70000000, "getExpSequence", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getServerTimingSeqControl")) {

    _0RL_cd_a900cfa937059cb8_80000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_90000000, "getServerTimingSeqControl", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getRegisteredDevices")) {

    _0RL_cd_a900cfa937059cb8_a0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b0000000, "getRegisteredDevices", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getServerCommandLine")) {

    _0RL_cd_a900cfa937059cb8_c0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d0000000, "getServerCommandLine", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_ClientBootstrap::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::ClientBootstrap::_PD_repoId)
    return (::STI::Client_Server::_impl_ClientBootstrap*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::ClientBootstrap::_PD_repoId))
    return (::STI::Client_Server::_impl_ClientBootstrap*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_ClientBootstrap::_mostDerivedRepoId()
{
  return ::STI::Client_Server::ClientBootstrap::_PD_repoId;
}

STI::Client_Server::ModeInterrupt_ptr STI::Client_Server::ModeInterrupt_Helper::_nil() {
  return ::STI::Client_Server::ModeInterrupt::_nil();
}

::CORBA::Boolean STI::Client_Server::ModeInterrupt_Helper::is_nil(::STI::Client_Server::ModeInterrupt_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::ModeInterrupt_Helper::release(::STI::Client_Server::ModeInterrupt_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::ModeInterrupt_Helper::marshalObjRef(::STI::Client_Server::ModeInterrupt_ptr obj, cdrStream& s) {
  ::STI::Client_Server::ModeInterrupt::_marshalObjRef(obj, s);
}

STI::Client_Server::ModeInterrupt_ptr STI::Client_Server::ModeInterrupt_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::ModeInterrupt::_unmarshalObjRef(s);
}

void STI::Client_Server::ModeInterrupt_Helper::duplicate(::STI::Client_Server::ModeInterrupt_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::ModeInterrupt_ptr
STI::Client_Server::ModeInterrupt::_duplicate(::STI::Client_Server::ModeInterrupt_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::ModeInterrupt_ptr
STI::Client_Server::ModeInterrupt::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::ModeInterrupt_ptr
STI::Client_Server::ModeInterrupt::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::ModeInterrupt_ptr
STI::Client_Server::ModeInterrupt::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeInterrupt _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeInterrupt* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ModeInterrupt;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::ModeInterrupt::_PD_repoId = "IDL:STI/Client_Server/ModeInterrupt:1.0";


STI::Client_Server::_objref_ModeInterrupt::~_objref_ModeInterrupt() {
  
}


STI::Client_Server::_objref_ModeInterrupt::_objref_ModeInterrupt(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::ModeInterrupt::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_ModeInterrupt::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::ModeInterrupt::_PD_repoId)
    return (::STI::Client_Server::ModeInterrupt_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::ModeInterrupt::_PD_repoId))
    return (::STI::Client_Server::ModeInterrupt_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::ModeInterrupt::requestControl

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring
class _0RL_cd_a900cfa937059cb8_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_e0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_a900cfa937059cb8_e0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a900cfa937059cb8_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_a900cfa937059cb8_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_e0000000* tcd = (_0RL_cd_a900cfa937059cb8_e0000000*)cd;
  STI::Client_Server::_impl_ModeInterrupt* impl = (STI::Client_Server::_impl_ModeInterrupt*) svnt->_ptrToInterface(STI::Client_Server::ModeInterrupt::_PD_repoId);
  impl->requestControl(tcd->arg_0, tcd->arg_1);


}

void STI::Client_Server::_objref_ModeInterrupt::requestControl(const char* myName, const char* ipAddress)
{
  _0RL_cd_a900cfa937059cb8_e0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f0000000, "requestControl", 15);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ModeInterrupt::controlTakenBy

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_e0000000* tcd = (_0RL_cd_a900cfa937059cb8_e0000000*)cd;
  STI::Client_Server::_impl_ModeInterrupt* impl = (STI::Client_Server::_impl_ModeInterrupt*) svnt->_ptrToInterface(STI::Client_Server::ModeInterrupt::_PD_repoId);
  impl->controlTakenBy(tcd->arg_0, tcd->arg_1);


}

void STI::Client_Server::_objref_ModeInterrupt::controlTakenBy(const char* myName, const char* ipAddress)
{
  _0RL_cd_a900cfa937059cb8_e0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_01000000, "controlTakenBy", 15);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;

  _invoke(_call_desc);



}

STI::Client_Server::_pof_ModeInterrupt::~_pof_ModeInterrupt() {}


omniObjRef*
STI::Client_Server::_pof_ModeInterrupt::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_ModeInterrupt(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_ModeInterrupt::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::ModeInterrupt::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_ModeInterrupt _the_pof_STI_mClient__Server_mModeInterrupt;

STI::Client_Server::_impl_ModeInterrupt::~_impl_ModeInterrupt() {}


::CORBA::Boolean
STI::Client_Server::_impl_ModeInterrupt::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "requestControl")) {

    _0RL_cd_a900cfa937059cb8_e0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f0000000, "requestControl", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "controlTakenBy")) {

    _0RL_cd_a900cfa937059cb8_e0000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_01000000, "controlTakenBy", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_ModeInterrupt::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::ModeInterrupt::_PD_repoId)
    return (::STI::Client_Server::_impl_ModeInterrupt*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::ModeInterrupt::_PD_repoId))
    return (::STI::Client_Server::_impl_ModeInterrupt*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_ModeInterrupt::_mostDerivedRepoId()
{
  return ::STI::Client_Server::ModeInterrupt::_PD_repoId;
}

STI::Client_Server::ModeHandler_ptr STI::Client_Server::ModeHandler_Helper::_nil() {
  return ::STI::Client_Server::ModeHandler::_nil();
}

::CORBA::Boolean STI::Client_Server::ModeHandler_Helper::is_nil(::STI::Client_Server::ModeHandler_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::ModeHandler_Helper::release(::STI::Client_Server::ModeHandler_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::ModeHandler_Helper::marshalObjRef(::STI::Client_Server::ModeHandler_ptr obj, cdrStream& s) {
  ::STI::Client_Server::ModeHandler::_marshalObjRef(obj, s);
}

STI::Client_Server::ModeHandler_ptr STI::Client_Server::ModeHandler_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::ModeHandler::_unmarshalObjRef(s);
}

void STI::Client_Server::ModeHandler_Helper::duplicate(::STI::Client_Server::ModeHandler_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::ModeHandler_ptr
STI::Client_Server::ModeHandler::_duplicate(::STI::Client_Server::ModeHandler_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::ModeHandler_ptr
STI::Client_Server::ModeHandler::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::ModeHandler_ptr
STI::Client_Server::ModeHandler::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::ModeHandler_ptr
STI::Client_Server::ModeHandler::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModeHandler _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModeHandler* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ModeHandler;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::ModeHandler::_PD_repoId = "IDL:STI/Client_Server/ModeHandler:1.0";


STI::Client_Server::_objref_ModeHandler::~_objref_ModeHandler() {
  
}


STI::Client_Server::_objref_ModeHandler::_objref_ModeHandler(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::ModeHandler::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_ModeHandler::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::ModeHandler::_PD_repoId)
    return (::STI::Client_Server::ModeHandler_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::ModeHandler::_PD_repoId))
    return (::STI::Client_Server::ModeHandler_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::ModeHandler::_get_controllerName

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_a900cfa937059cb8_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_11000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_a900cfa937059cb8_11000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_a900cfa937059cb8_11000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_a900cfa937059cb8_11000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_ModeHandler* impl = (STI::Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI::Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->controllerName();


}

char* STI::Client_Server::_objref_ModeHandler::controllerName()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_21000000, "_get_controllerName", 20);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ModeHandler::_get_controllerIP

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_ModeHandler* impl = (STI::Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI::Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->controllerIP();


}

char* STI::Client_Server::_objref_ModeHandler::controllerIP()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_31000000, "_get_controllerIP", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ModeHandler::requestControl

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cSTI_mClient__Server_mModeInterrupt
class _0RL_cd_a900cfa937059cb8_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_41000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  STI::Client_Server::ModeInterrupt_var arg_2_;
  STI::Client_Server::ModeInterrupt_ptr arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_41000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  STI::Client_Server::ModeInterrupt::_marshalObjRef(arg_2,_n);

}

void _0RL_cd_a900cfa937059cb8_41000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = STI::Client_Server::ModeInterrupt::_unmarshalObjRef(_n);
  arg_2 = arg_2_.in();

}

void _0RL_cd_a900cfa937059cb8_41000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_41000000* tcd = (_0RL_cd_a900cfa937059cb8_41000000*)cd;
  STI::Client_Server::_impl_ModeHandler* impl = (STI::Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI::Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->requestControl(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI::Client_Server::_objref_ModeHandler::requestControl(const char* myName, const char* ipAddress, ::STI::Client_Server::ModeInterrupt_ptr interrupt)
{
  _0RL_cd_a900cfa937059cb8_41000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_51000000, "requestControl", 15);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;
  _call_desc.arg_2 = interrupt;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ModeHandler::takeControl

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_41000000* tcd = (_0RL_cd_a900cfa937059cb8_41000000*)cd;
  STI::Client_Server::_impl_ModeHandler* impl = (STI::Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI::Client_Server::ModeHandler::_PD_repoId);
  tcd->result = impl->takeControl(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI::Client_Server::_objref_ModeHandler::takeControl(const char* myName, const char* ipAddress, ::STI::Client_Server::ModeInterrupt_ptr interrupt)
{
  _0RL_cd_a900cfa937059cb8_41000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_61000000, "takeControl", 12);
  _call_desc.arg_0 = myName;
  _call_desc.arg_1 = ipAddress;
  _call_desc.arg_2 = interrupt;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ModeHandler::cancelRequest

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_a900cfa937059cb8_71000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_71000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_a900cfa937059cb8_71000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_81000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ModeHandler* impl = (STI::Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI::Client_Server::ModeHandler::_PD_repoId);
  impl->cancelRequest();


}

void STI::Client_Server::_objref_ModeHandler::cancelRequest()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_81000000, "cancelRequest", 14);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ModeHandler::answerRequest

// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_cd_a900cfa937059cb8_91000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_91000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Boolean arg_0;
};

void _0RL_cd_a900cfa937059cb8_91000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_a900cfa937059cb8_91000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_91000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_91000000* tcd = (_0RL_cd_a900cfa937059cb8_91000000*)cd;
  STI::Client_Server::_impl_ModeHandler* impl = (STI::Client_Server::_impl_ModeHandler*) svnt->_ptrToInterface(STI::Client_Server::ModeHandler::_PD_repoId);
  impl->answerRequest(tcd->arg_0);


}

void STI::Client_Server::_objref_ModeHandler::answerRequest(::CORBA::Boolean yield)
{
  _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a1000000, "answerRequest", 14);
  _call_desc.arg_0 = yield;

  _invoke(_call_desc);



}

STI::Client_Server::_pof_ModeHandler::~_pof_ModeHandler() {}


omniObjRef*
STI::Client_Server::_pof_ModeHandler::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_ModeHandler(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_ModeHandler::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::ModeHandler::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_ModeHandler _the_pof_STI_mClient__Server_mModeHandler;

STI::Client_Server::_impl_ModeHandler::~_impl_ModeHandler() {}


::CORBA::Boolean
STI::Client_Server::_impl_ModeHandler::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_controllerName")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_21000000, "_get_controllerName", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_controllerIP")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_31000000, "_get_controllerIP", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "requestControl")) {

    _0RL_cd_a900cfa937059cb8_41000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_51000000, "requestControl", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "takeControl")) {

    _0RL_cd_a900cfa937059cb8_41000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_61000000, "takeControl", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "cancelRequest")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_81000000, "cancelRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "answerRequest")) {

    _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a1000000, "answerRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_ModeHandler::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::ModeHandler::_PD_repoId)
    return (::STI::Client_Server::_impl_ModeHandler*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::ModeHandler::_PD_repoId))
    return (::STI::Client_Server::_impl_ModeHandler*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_ModeHandler::_mostDerivedRepoId()
{
  return ::STI::Client_Server::ModeHandler::_PD_repoId;
}

STI::Client_Server::Parser_ptr STI::Client_Server::Parser_Helper::_nil() {
  return ::STI::Client_Server::Parser::_nil();
}

::CORBA::Boolean STI::Client_Server::Parser_Helper::is_nil(::STI::Client_Server::Parser_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::Parser_Helper::release(::STI::Client_Server::Parser_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::Parser_Helper::marshalObjRef(::STI::Client_Server::Parser_ptr obj, cdrStream& s) {
  ::STI::Client_Server::Parser::_marshalObjRef(obj, s);
}

STI::Client_Server::Parser_ptr STI::Client_Server::Parser_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::Parser::_unmarshalObjRef(s);
}

void STI::Client_Server::Parser_Helper::duplicate(::STI::Client_Server::Parser_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::Parser_ptr
STI::Client_Server::Parser::_duplicate(::STI::Client_Server::Parser_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::Parser_ptr
STI::Client_Server::Parser::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::Parser_ptr
STI::Client_Server::Parser::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::Parser_ptr
STI::Client_Server::Parser::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Parser _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Parser* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_Parser;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::Parser::_PD_repoId = "IDL:STI/Client_Server/Parser:1.0";


STI::Client_Server::_objref_Parser::~_objref_Parser() {
  
}


STI::Client_Server::_objref_Parser::_objref_Parser(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::Parser::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_Parser::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::Parser::_PD_repoId)
    return (::STI::Client_Server::Parser_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::Parser::_PD_repoId))
    return (::STI::Client_Server::Parser_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::Parser::_get_overwritten

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTOverwrittenSeq
class _0RL_cd_a900cfa937059cb8_b1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_b1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TOverwrittenSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_b1000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TOverwrittenSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_b1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TOverwrittenSeq;
  (STI::Types::TOverwrittenSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_b1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_b1000000* tcd = (_0RL_cd_a900cfa937059cb8_b1000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->overwritten();


}

STI::Types::TOverwrittenSeq* STI::Client_Server::_objref_Parser::overwritten()
{
  _0RL_cd_a900cfa937059cb8_b1000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c1000000, "_get_overwritten", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_set_overwritten

// Proxy call descriptor class. Mangled signature:
//  void_i_cSTI_mTypes_mTOverwrittenSeq
class _0RL_cd_a900cfa937059cb8_d1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_d1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  STI::Types::TOverwrittenSeq_var arg_0_;
  const STI::Types::TOverwrittenSeq* arg_0;
};

void _0RL_cd_a900cfa937059cb8_d1000000::marshalArguments(cdrStream& _n)
{
  (const STI::Types::TOverwrittenSeq&) *arg_0 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_d1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI::Types::TOverwrittenSeq;
  (STI::Types::TOverwrittenSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_a900cfa937059cb8_d1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_d1000000* tcd = (_0RL_cd_a900cfa937059cb8_d1000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  impl->overwritten(*tcd->arg_0);


}

void STI::Client_Server::_objref_Parser::overwritten(const ::STI::Types::TOverwrittenSeq& _v)
{
  _0RL_cd_a900cfa937059cb8_d1000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e1000000, "_set_overwritten", 17);
  _call_desc.arg_0 = &(::STI::Types::TOverwrittenSeq&) _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::Parser::_get_lockOnParse

// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_a900cfa937059cb8_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_f1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_f1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_f1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_f1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_f1000000* tcd = (_0RL_cd_a900cfa937059cb8_f1000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->lockOnParse();


}

::CORBA::Boolean STI::Client_Server::_objref_Parser::lockOnParse()
{
  _0RL_cd_a900cfa937059cb8_f1000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_02000000, "_get_lockOnParse", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::Parser::_set_lockOnParse

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_91000000* tcd = (_0RL_cd_a900cfa937059cb8_91000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  impl->lockOnParse(tcd->arg_0);


}

void STI::Client_Server::_objref_Parser::lockOnParse(::CORBA::Boolean _v)
{
  _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_12000000, "_set_lockOnParse", 17);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::Parser::parseFile

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_a900cfa937059cb8_22000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_22000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_22000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_22000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_22000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_22000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_22000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_22000000* tcd = (_0RL_cd_a900cfa937059cb8_22000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseFile(tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_Parser::parseFile(const char* filename)
{
  _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_32000000, "parseFile", 10);
  _call_desc.arg_0 = filename;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::Parser::parseString

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_22000000* tcd = (_0RL_cd_a900cfa937059cb8_22000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseString(tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_Parser::parseString(const char* code)
{
  _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_42000000, "parseString", 12);
  _call_desc.arg_0 = code;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::Parser::parseLoopScript

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_22000000* tcd = (_0RL_cd_a900cfa937059cb8_22000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->parseLoopScript(tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_Parser::parseLoopScript(const char* script)
{
  _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_52000000, "parseLoopScript", 16);
  _call_desc.arg_0 = script;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::Parser::stringToMixedValue

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_o_cSTI_mTypes_mTValMixed
class _0RL_cd_a900cfa937059cb8_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_62000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI::Types::TValMixed_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_62000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_62000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_62000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const STI::Types::TValMixed&) arg_1 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_62000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new STI::Types::TValMixed;
  (STI::Types::TValMixed&)arg_1 <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_62000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_62000000* tcd = (_0RL_cd_a900cfa937059cb8_62000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->stringToMixedValue(tcd->arg_0, tcd->arg_1.out());


}

::CORBA::Boolean STI::Client_Server::_objref_Parser::stringToMixedValue(const char* code, ::STI::Types::TValMixed_out value)
{
  _0RL_cd_a900cfa937059cb8_62000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_72000000, "stringToMixedValue", 19);
  _call_desc.arg_0 = code;

  _invoke(_call_desc);
  value = _call_desc.arg_1._retn();
  return _call_desc.result;


}


//
// Code for STI::Client_Server::Parser::_get_outMsg

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->outMsg();


}

char* STI::Client_Server::_objref_Parser::outMsg()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_82000000, "_get_outMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_errMsg

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_92000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI::Client_Server::_objref_Parser::errMsg()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_92000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_mainFile

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->mainFile();


}

char* STI::Client_Server::_objref_Parser::mainFile()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a2000000, "_get_mainFile", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_channels

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTChannelSeq
class _0RL_cd_a900cfa937059cb8_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_b2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TChannelSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_b2000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TChannelSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TChannelSeq;
  (STI::Types::TChannelSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_b2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_b2000000* tcd = (_0RL_cd_a900cfa937059cb8_b2000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->channels();


}

STI::Types::TChannelSeq* STI::Client_Server::_objref_Parser::channels()
{
  _0RL_cd_a900cfa937059cb8_b2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c2000000, "_get_channels", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_files

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTStringSeq
class _0RL_cd_a900cfa937059cb8_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_d2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TStringSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_d2000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TStringSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_d2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TStringSeq;
  (STI::Types::TStringSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_d2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_d2000000* tcd = (_0RL_cd_a900cfa937059cb8_d2000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->files();


}

STI::Types::TStringSeq* STI::Client_Server::_objref_Parser::files()
{
  _0RL_cd_a900cfa937059cb8_d2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e2000000, "_get_files", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_variables

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTVariableSeq
class _0RL_cd_a900cfa937059cb8_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_f2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TVariableSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_f2000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TVariableSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_f2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TVariableSeq;
  (STI::Types::TVariableSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_f2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_f2000000* tcd = (_0RL_cd_a900cfa937059cb8_f2000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->variables();


}

STI::Types::TVariableSeq* STI::Client_Server::_objref_Parser::variables()
{
  _0RL_cd_a900cfa937059cb8_f2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_03000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_events

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTEventSeq
class _0RL_cd_a900cfa937059cb8_13000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_13000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TEventSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_13000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TEventSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_13000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TEventSeq;
  (STI::Types::TEventSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_13000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_23000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_13000000* tcd = (_0RL_cd_a900cfa937059cb8_13000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->events();


}

STI::Types::TEventSeq* STI::Client_Server::_objref_Parser::events()
{
  _0RL_cd_a900cfa937059cb8_13000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_23000000, "_get_events", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::Parser::_get_tags

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTTagSeq
class _0RL_cd_a900cfa937059cb8_33000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_33000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TTagSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_33000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TTagSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_33000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TTagSeq;
  (STI::Types::TTagSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_33000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_33000000* tcd = (_0RL_cd_a900cfa937059cb8_33000000*)cd;
  STI::Client_Server::_impl_Parser* impl = (STI::Client_Server::_impl_Parser*) svnt->_ptrToInterface(STI::Client_Server::Parser::_PD_repoId);
  tcd->result = impl->tags();


}

STI::Types::TTagSeq* STI::Client_Server::_objref_Parser::tags()
{
  _0RL_cd_a900cfa937059cb8_33000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_43000000, "_get_tags", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}

STI::Client_Server::_pof_Parser::~_pof_Parser() {}


omniObjRef*
STI::Client_Server::_pof_Parser::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_Parser(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_Parser::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::Parser::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_Parser _the_pof_STI_mClient__Server_mParser;

STI::Client_Server::_impl_Parser::~_impl_Parser() {}


::CORBA::Boolean
STI::Client_Server::_impl_Parser::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_overwritten")) {

    _0RL_cd_a900cfa937059cb8_b1000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c1000000, "_get_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_overwritten")) {

    _0RL_cd_a900cfa937059cb8_d1000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e1000000, "_set_overwritten", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_lockOnParse")) {

    _0RL_cd_a900cfa937059cb8_f1000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_02000000, "_get_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_lockOnParse")) {

    _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_12000000, "_set_lockOnParse", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "parseFile")) {

    _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_32000000, "parseFile", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "parseString")) {

    _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_42000000, "parseString", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "parseLoopScript")) {

    _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_52000000, "parseLoopScript", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "stringToMixedValue")) {

    _0RL_cd_a900cfa937059cb8_62000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_72000000, "stringToMixedValue", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_outMsg")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_82000000, "_get_outMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_errMsg")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_92000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_mainFile")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a2000000, "_get_mainFile", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_channels")) {

    _0RL_cd_a900cfa937059cb8_b2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c2000000, "_get_channels", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_files")) {

    _0RL_cd_a900cfa937059cb8_d2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e2000000, "_get_files", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_variables")) {

    _0RL_cd_a900cfa937059cb8_f2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_03000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_events")) {

    _0RL_cd_a900cfa937059cb8_13000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_23000000, "_get_events", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_tags")) {

    _0RL_cd_a900cfa937059cb8_33000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_43000000, "_get_tags", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_Parser::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::Parser::_PD_repoId)
    return (::STI::Client_Server::_impl_Parser*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::Parser::_PD_repoId))
    return (::STI::Client_Server::_impl_Parser*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_Parser::_mostDerivedRepoId()
{
  return ::STI::Client_Server::Parser::_PD_repoId;
}

STI::Client_Server::ExpSequence_ptr STI::Client_Server::ExpSequence_Helper::_nil() {
  return ::STI::Client_Server::ExpSequence::_nil();
}

::CORBA::Boolean STI::Client_Server::ExpSequence_Helper::is_nil(::STI::Client_Server::ExpSequence_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::ExpSequence_Helper::release(::STI::Client_Server::ExpSequence_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::ExpSequence_Helper::marshalObjRef(::STI::Client_Server::ExpSequence_ptr obj, cdrStream& s) {
  ::STI::Client_Server::ExpSequence::_marshalObjRef(obj, s);
}

STI::Client_Server::ExpSequence_ptr STI::Client_Server::ExpSequence_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::ExpSequence::_unmarshalObjRef(s);
}

void STI::Client_Server::ExpSequence_Helper::duplicate(::STI::Client_Server::ExpSequence_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::ExpSequence_ptr
STI::Client_Server::ExpSequence::_duplicate(::STI::Client_Server::ExpSequence_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::ExpSequence_ptr
STI::Client_Server::ExpSequence::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::ExpSequence_ptr
STI::Client_Server::ExpSequence::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::ExpSequence_ptr
STI::Client_Server::ExpSequence::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExpSequence _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExpSequence* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ExpSequence;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::ExpSequence::_PD_repoId = "IDL:STI/Client_Server/ExpSequence:1.0";


STI::Client_Server::_objref_ExpSequence::~_objref_ExpSequence() {
  
}


STI::Client_Server::_objref_ExpSequence::_objref_ExpSequence(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::ExpSequence::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_ExpSequence::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::ExpSequence::_PD_repoId)
    return (::STI::Client_Server::ExpSequence_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::ExpSequence::_PD_repoId))
    return (::STI::Client_Server::ExpSequence_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::ExpSequence::setExpSequence

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI_mTypes_mTStringSeq_i_cSTI_mTypes_mTRowSeq
class _0RL_cd_a900cfa937059cb8_53000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_53000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TStringSeq_var arg_0_;
  const STI::Types::TStringSeq* arg_0;
  STI::Types::TRowSeq_var arg_1_;
  const STI::Types::TRowSeq* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_53000000::marshalArguments(cdrStream& _n)
{
  (const STI::Types::TStringSeq&) *arg_0 >>= _n;
  (const STI::Types::TRowSeq&) *arg_1 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_53000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI::Types::TStringSeq;
  (STI::Types::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new STI::Types::TRowSeq;
  (STI::Types::TRowSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_a900cfa937059cb8_53000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_53000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_53000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_53000000* tcd = (_0RL_cd_a900cfa937059cb8_53000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->setExpSequence(*tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI::Client_Server::_objref_ExpSequence::setExpSequence(const ::STI::Types::TStringSeq& Variables, const ::STI::Types::TRowSeq& Experiments)
{
  _0RL_cd_a900cfa937059cb8_53000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_63000000, "setExpSequence", 15);
  _call_desc.arg_0 = &(::STI::Types::TStringSeq&) Variables;
  _call_desc.arg_1 = &(::STI::Types::TRowSeq&) Experiments;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ExpSequence::_get_variables

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_d2000000* tcd = (_0RL_cd_a900cfa937059cb8_d2000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->variables();


}

STI::Types::TStringSeq* STI::Client_Server::_objref_ExpSequence::variables()
{
  _0RL_cd_a900cfa937059cb8_d2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_73000000, "_get_variables", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ExpSequence::_set_variables

// Proxy call descriptor class. Mangled signature:
//  void_i_cSTI_mTypes_mTStringSeq
class _0RL_cd_a900cfa937059cb8_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_83000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  STI::Types::TStringSeq_var arg_0_;
  const STI::Types::TStringSeq* arg_0;
};

void _0RL_cd_a900cfa937059cb8_83000000::marshalArguments(cdrStream& _n)
{
  (const STI::Types::TStringSeq&) *arg_0 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_83000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI::Types::TStringSeq;
  (STI::Types::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_a900cfa937059cb8_83000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_83000000* tcd = (_0RL_cd_a900cfa937059cb8_83000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  impl->variables(*tcd->arg_0);


}

void STI::Client_Server::_objref_ExpSequence::variables(const ::STI::Types::TStringSeq& _v)
{
  _0RL_cd_a900cfa937059cb8_83000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_93000000, "_set_variables", 15);
  _call_desc.arg_0 = &(::STI::Types::TStringSeq&) _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ExpSequence::_get_experiments

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTRowSeq
class _0RL_cd_a900cfa937059cb8_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_a3000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TRowSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_a3000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TRowSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_a3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TRowSeq;
  (STI::Types::TRowSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_a3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a3000000* tcd = (_0RL_cd_a900cfa937059cb8_a3000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->experiments();


}

STI::Types::TRowSeq* STI::Client_Server::_objref_ExpSequence::experiments()
{
  _0RL_cd_a900cfa937059cb8_a3000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b3000000, "_get_experiments", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ExpSequence::appendRow

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cSTI_mTypes_mTStringSeq
class _0RL_cd_a900cfa937059cb8_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_c3000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TStringSeq_var arg_0_;
  const STI::Types::TStringSeq* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_c3000000::marshalArguments(cdrStream& _n)
{
  (const STI::Types::TStringSeq&) *arg_0 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_c3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new STI::Types::TStringSeq;
  (STI::Types::TStringSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_c3000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_c3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_c3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_c3000000* tcd = (_0RL_cd_a900cfa937059cb8_c3000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->appendRow(*tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_ExpSequence::appendRow(const ::STI::Types::TStringSeq& newRow)
{
  _0RL_cd_a900cfa937059cb8_c3000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d3000000, "appendRow", 10);
  _call_desc.arg_0 = &(::STI::Types::TStringSeq&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ExpSequence::moveRow

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cunsigned_plong
class _0RL_cd_a900cfa937059cb8_e3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_e3000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::ULong arg_0;
  ::CORBA::ULong arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_e3000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_e3000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  (::CORBA::ULong&)arg_1 <<= _n;

}

void _0RL_cd_a900cfa937059cb8_e3000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_e3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_e3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_e3000000* tcd = (_0RL_cd_a900cfa937059cb8_e3000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->moveRow(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI::Client_Server::_objref_ExpSequence::moveRow(::CORBA::ULong oldPos, ::CORBA::ULong newPos)
{
  _0RL_cd_a900cfa937059cb8_e3000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f3000000, "moveRow", 8);
  _call_desc.arg_0 = oldPos;
  _call_desc.arg_1 = newPos;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ExpSequence::editRow

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cSTI_mTypes_mTRow
class _0RL_cd_a900cfa937059cb8_04000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_04000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::ULong arg_0;
  STI::Types::TRow_var arg_1_;
  const STI::Types::TRow* arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_04000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const STI::Types::TRow&) *arg_1 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_04000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1_ = new STI::Types::TRow;
  (STI::Types::TRow&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_a900cfa937059cb8_04000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_04000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_04000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_04000000* tcd = (_0RL_cd_a900cfa937059cb8_04000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->editRow(tcd->arg_0, *tcd->arg_1);


}

::CORBA::Boolean STI::Client_Server::_objref_ExpSequence::editRow(::CORBA::ULong pos, const ::STI::Types::TRow& newRow)
{
  _0RL_cd_a900cfa937059cb8_04000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_14000000, "editRow", 8);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = &(::STI::Types::TRow&) newRow;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ExpSequence::deleteRow

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong
class _0RL_cd_a900cfa937059cb8_24000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_24000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::ULong arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_24000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_24000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;

}

void _0RL_cd_a900cfa937059cb8_24000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_24000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_24000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_34000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_24000000* tcd = (_0RL_cd_a900cfa937059cb8_24000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->deleteRow(tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_ExpSequence::deleteRow(::CORBA::ULong pos)
{
  _0RL_cd_a900cfa937059cb8_24000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_34000000, "deleteRow", 10);
  _call_desc.arg_0 = pos;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ExpSequence::clear

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_44000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  impl->clear();


}

void STI::Client_Server::_objref_ExpSequence::clear()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_44000000, "clear", 6);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ExpSequence::editRowDone

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cunsigned_plong_i_cboolean
class _0RL_cd_a900cfa937059cb8_54000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_54000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::ULong arg_0;
  ::CORBA::Boolean arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_54000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_a900cfa937059cb8_54000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_a900cfa937059cb8_54000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_54000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_54000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_64000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_54000000* tcd = (_0RL_cd_a900cfa937059cb8_54000000*)cd;
  STI::Client_Server::_impl_ExpSequence* impl = (STI::Client_Server::_impl_ExpSequence*) svnt->_ptrToInterface(STI::Client_Server::ExpSequence::_PD_repoId);
  tcd->result = impl->editRowDone(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean STI::Client_Server::_objref_ExpSequence::editRowDone(::CORBA::ULong pos, ::CORBA::Boolean newDone)
{
  _0RL_cd_a900cfa937059cb8_54000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_64000000, "editRowDone", 12);
  _call_desc.arg_0 = pos;
  _call_desc.arg_1 = newDone;

  _invoke(_call_desc);
  return _call_desc.result;


}

STI::Client_Server::_pof_ExpSequence::~_pof_ExpSequence() {}


omniObjRef*
STI::Client_Server::_pof_ExpSequence::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_ExpSequence(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_ExpSequence::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::ExpSequence::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_ExpSequence _the_pof_STI_mClient__Server_mExpSequence;

STI::Client_Server::_impl_ExpSequence::~_impl_ExpSequence() {}


::CORBA::Boolean
STI::Client_Server::_impl_ExpSequence::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "setExpSequence")) {

    _0RL_cd_a900cfa937059cb8_53000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_63000000, "setExpSequence", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_variables")) {

    _0RL_cd_a900cfa937059cb8_d2000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_73000000, "_get_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_variables")) {

    _0RL_cd_a900cfa937059cb8_83000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_93000000, "_set_variables", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_experiments")) {

    _0RL_cd_a900cfa937059cb8_a3000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b3000000, "_get_experiments", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "appendRow")) {

    _0RL_cd_a900cfa937059cb8_c3000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d3000000, "appendRow", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "moveRow")) {

    _0RL_cd_a900cfa937059cb8_e3000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f3000000, "moveRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "editRow")) {

    _0RL_cd_a900cfa937059cb8_04000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_14000000, "editRow", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "deleteRow")) {

    _0RL_cd_a900cfa937059cb8_24000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_34000000, "deleteRow", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "clear")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_44000000, "clear", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "editRowDone")) {

    _0RL_cd_a900cfa937059cb8_54000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_64000000, "editRowDone", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_ExpSequence::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::ExpSequence::_PD_repoId)
    return (::STI::Client_Server::_impl_ExpSequence*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::ExpSequence::_PD_repoId))
    return (::STI::Client_Server::_impl_ExpSequence*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_ExpSequence::_mostDerivedRepoId()
{
  return ::STI::Client_Server::ExpSequence::_PD_repoId;
}

STI::Client_Server::ServerTimingSeqControl_ptr STI::Client_Server::ServerTimingSeqControl_Helper::_nil() {
  return ::STI::Client_Server::ServerTimingSeqControl::_nil();
}

::CORBA::Boolean STI::Client_Server::ServerTimingSeqControl_Helper::is_nil(::STI::Client_Server::ServerTimingSeqControl_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::ServerTimingSeqControl_Helper::release(::STI::Client_Server::ServerTimingSeqControl_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::ServerTimingSeqControl_Helper::marshalObjRef(::STI::Client_Server::ServerTimingSeqControl_ptr obj, cdrStream& s) {
  ::STI::Client_Server::ServerTimingSeqControl::_marshalObjRef(obj, s);
}

STI::Client_Server::ServerTimingSeqControl_ptr STI::Client_Server::ServerTimingSeqControl_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::ServerTimingSeqControl::_unmarshalObjRef(s);
}

void STI::Client_Server::ServerTimingSeqControl_Helper::duplicate(::STI::Client_Server::ServerTimingSeqControl_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::ServerTimingSeqControl_ptr
STI::Client_Server::ServerTimingSeqControl::_duplicate(::STI::Client_Server::ServerTimingSeqControl_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::ServerTimingSeqControl_ptr
STI::Client_Server::ServerTimingSeqControl::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::ServerTimingSeqControl_ptr
STI::Client_Server::ServerTimingSeqControl::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::ServerTimingSeqControl_ptr
STI::Client_Server::ServerTimingSeqControl::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ServerTimingSeqControl _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ServerTimingSeqControl* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ServerTimingSeqControl;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::ServerTimingSeqControl::_PD_repoId = "IDL:STI/Client_Server/ServerTimingSeqControl:1.0";


STI::Client_Server::_objref_ServerTimingSeqControl::~_objref_ServerTimingSeqControl() {
  
}


STI::Client_Server::_objref_ServerTimingSeqControl::_objref_ServerTimingSeqControl(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::ServerTimingSeqControl::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_ServerTimingSeqControl::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::ServerTimingSeqControl::_PD_repoId)
    return (::STI::Client_Server::ServerTimingSeqControl_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::ServerTimingSeqControl::_PD_repoId))
    return (::STI::Client_Server::ServerTimingSeqControl_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::ServerTimingSeqControl::_get_errMsg

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  tcd->result = impl->errMsg();


}

char* STI::Client_Server::_objref_ServerTimingSeqControl::errMsg()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_74000000, "_get_errMsg", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ServerTimingSeqControl::status

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTStatus
class _0RL_cd_a900cfa937059cb8_84000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_84000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TStatus result;
};

void _0RL_cd_a900cfa937059cb8_84000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TStatus&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_84000000::unmarshalReturnedValues(cdrStream& _n)
{
  (STI::Types::TStatus&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_84000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_84000000* tcd = (_0RL_cd_a900cfa937059cb8_84000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  tcd->result = impl->status();


}

STI::Types::TStatus STI::Client_Server::_objref_ServerTimingSeqControl::status()
{
  _0RL_cd_a900cfa937059cb8_84000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_94000000, "status", 7);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ServerTimingSeqControl::transferErr

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_a900cfa937059cb8_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_a4000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_a900cfa937059cb8_a4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_a4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_a4000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_a900cfa937059cb8_a4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_a900cfa937059cb8_a4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a4000000* tcd = (_0RL_cd_a900cfa937059cb8_a4000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  tcd->result = impl->transferErr(tcd->arg_0);


}

char* STI::Client_Server::_objref_ServerTimingSeqControl::transferErr(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_a4000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b4000000, "transferErr", 12);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ServerTimingSeqControl::reset

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_c4000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->reset();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::reset()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c4000000, "reset", 6);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::setDirect

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_d4000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->setDirect();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::setDirect()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d4000000, "setDirect", 10);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::runSingle

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_e4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_91000000* tcd = (_0RL_cd_a900cfa937059cb8_91000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->runSingle(tcd->arg_0);


}

void STI::Client_Server::_objref_ServerTimingSeqControl::runSingle(::CORBA::Boolean documented)
{
  _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e4000000, "runSingle", 10);
  _call_desc.arg_0 = documented;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::runSequence

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_91000000* tcd = (_0RL_cd_a900cfa937059cb8_91000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->runSequence(tcd->arg_0);


}

void STI::Client_Server::_objref_ServerTimingSeqControl::runSequence(::CORBA::Boolean documented)
{
  _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f4000000, "runSequence", 12);
  _call_desc.arg_0 = documented;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::runSingleContinuous

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_05000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->runSingleContinuous();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::runSingleContinuous()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_05000000, "runSingleContinuous", 20);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::continue

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_15000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->_cxx_continue();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::_cxx_continue()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_15000000, "continue", 9);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::pause

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_25000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->pause();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::pause()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_25000000, "pause", 6);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::resume

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_35000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->resume();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::resume()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_35000000, "resume", 7);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::stop

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_45000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  impl->stop();


}

void STI::Client_Server::_objref_ServerTimingSeqControl::stop()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_45000000, "stop", 5);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::ServerTimingSeqControl::getDefaultRunInfo

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTExpRunInfo
class _0RL_cd_a900cfa937059cb8_55000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_55000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TExpRunInfo_var result;
};

void _0RL_cd_a900cfa937059cb8_55000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TExpRunInfo&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_55000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TExpRunInfo;
  (STI::Types::TExpRunInfo&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_55000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_65000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_55000000* tcd = (_0RL_cd_a900cfa937059cb8_55000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  tcd->result = impl->getDefaultRunInfo();


}

STI::Types::TExpRunInfo* STI::Client_Server::_objref_ServerTimingSeqControl::getDefaultRunInfo()
{
  _0RL_cd_a900cfa937059cb8_55000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_65000000, "getDefaultRunInfo", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ServerTimingSeqControl::getDefaultSequenceInfo

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTExpSequenceInfo
class _0RL_cd_a900cfa937059cb8_75000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_75000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TExpSequenceInfo_var result;
};

void _0RL_cd_a900cfa937059cb8_75000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TExpSequenceInfo&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_75000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TExpSequenceInfo;
  (STI::Types::TExpSequenceInfo&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_75000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_85000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_75000000* tcd = (_0RL_cd_a900cfa937059cb8_75000000*)cd;
  STI::Client_Server::_impl_ServerTimingSeqControl* impl = (STI::Client_Server::_impl_ServerTimingSeqControl*) svnt->_ptrToInterface(STI::Client_Server::ServerTimingSeqControl::_PD_repoId);
  tcd->result = impl->getDefaultSequenceInfo();


}

STI::Types::TExpSequenceInfo* STI::Client_Server::_objref_ServerTimingSeqControl::getDefaultSequenceInfo()
{
  _0RL_cd_a900cfa937059cb8_75000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_85000000, "getDefaultSequenceInfo", 23);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}

STI::Client_Server::_pof_ServerTimingSeqControl::~_pof_ServerTimingSeqControl() {}


omniObjRef*
STI::Client_Server::_pof_ServerTimingSeqControl::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_ServerTimingSeqControl(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_ServerTimingSeqControl::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::ServerTimingSeqControl::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_ServerTimingSeqControl _the_pof_STI_mClient__Server_mServerTimingSeqControl;

STI::Client_Server::_impl_ServerTimingSeqControl::~_impl_ServerTimingSeqControl() {}


::CORBA::Boolean
STI::Client_Server::_impl_ServerTimingSeqControl::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_errMsg")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_74000000, "_get_errMsg", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "status")) {

    _0RL_cd_a900cfa937059cb8_84000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_94000000, "status", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "transferErr")) {

    _0RL_cd_a900cfa937059cb8_a4000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b4000000, "transferErr", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "reset")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c4000000, "reset", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setDirect")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d4000000, "setDirect", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "runSingle")) {

    _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e4000000, "runSingle", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "runSequence")) {

    _0RL_cd_a900cfa937059cb8_91000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f4000000, "runSequence", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "runSingleContinuous")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_05000000, "runSingleContinuous", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "continue")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_15000000, "continue", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "pause")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_25000000, "pause", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "resume")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_35000000, "resume", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "stop")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_45000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getDefaultRunInfo")) {

    _0RL_cd_a900cfa937059cb8_55000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_65000000, "getDefaultRunInfo", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getDefaultSequenceInfo")) {

    _0RL_cd_a900cfa937059cb8_75000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_85000000, "getDefaultSequenceInfo", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_ServerTimingSeqControl::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::ServerTimingSeqControl::_PD_repoId)
    return (::STI::Client_Server::_impl_ServerTimingSeqControl*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::ServerTimingSeqControl::_PD_repoId))
    return (::STI::Client_Server::_impl_ServerTimingSeqControl*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_ServerTimingSeqControl::_mostDerivedRepoId()
{
  return ::STI::Client_Server::ServerTimingSeqControl::_PD_repoId;
}

STI::Client_Server::DocumentationSettings_ptr STI::Client_Server::DocumentationSettings_Helper::_nil() {
  return ::STI::Client_Server::DocumentationSettings::_nil();
}

::CORBA::Boolean STI::Client_Server::DocumentationSettings_Helper::is_nil(::STI::Client_Server::DocumentationSettings_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::DocumentationSettings_Helper::release(::STI::Client_Server::DocumentationSettings_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::DocumentationSettings_Helper::marshalObjRef(::STI::Client_Server::DocumentationSettings_ptr obj, cdrStream& s) {
  ::STI::Client_Server::DocumentationSettings::_marshalObjRef(obj, s);
}

STI::Client_Server::DocumentationSettings_ptr STI::Client_Server::DocumentationSettings_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::DocumentationSettings::_unmarshalObjRef(s);
}

void STI::Client_Server::DocumentationSettings_Helper::duplicate(::STI::Client_Server::DocumentationSettings_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::DocumentationSettings_ptr
STI::Client_Server::DocumentationSettings::_duplicate(::STI::Client_Server::DocumentationSettings_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::DocumentationSettings_ptr
STI::Client_Server::DocumentationSettings::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::DocumentationSettings_ptr
STI::Client_Server::DocumentationSettings::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::DocumentationSettings_ptr
STI::Client_Server::DocumentationSettings::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DocumentationSettings _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DocumentationSettings* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_DocumentationSettings;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::DocumentationSettings::_PD_repoId = "IDL:STI/Client_Server/DocumentationSettings:1.0";


STI::Client_Server::_objref_DocumentationSettings::~_objref_DocumentationSettings() {
  
}


STI::Client_Server::_objref_DocumentationSettings::_objref_DocumentationSettings(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::DocumentationSettings::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_DocumentationSettings::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::DocumentationSettings::_PD_repoId)
    return (::STI::Client_Server::DocumentationSettings_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::DocumentationSettings::_PD_repoId))
    return (::STI::Client_Server::DocumentationSettings_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::DocumentationSettings::_get_DocumentationBaseAbsDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  tcd->result = impl->DocumentationBaseAbsDir();


}

char* STI::Client_Server::_objref_DocumentationSettings::DocumentationBaseAbsDir()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_95000000, "_get_DocumentationBaseAbsDir", 29);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::DocumentationSettings::_set_DocumentationBaseAbsDir

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_a900cfa937059cb8_a5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_a5000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_a900cfa937059cb8_a5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_a5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_a900cfa937059cb8_a5000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_b5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->DocumentationBaseAbsDir(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::DocumentationBaseAbsDir(const char* _v)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b5000000, "_set_DocumentationBaseAbsDir", 29);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::DocumentationSettings::_get_DTDFileAbsDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_c5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  tcd->result = impl->DTDFileAbsDir();


}

char* STI::Client_Server::_objref_DocumentationSettings::DTDFileAbsDir()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c5000000, "_get_DTDFileAbsDir", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::DocumentationSettings::_set_DTDFileAbsDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_d5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->DTDFileAbsDir(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::DTDFileAbsDir(const char* _v)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d5000000, "_set_DTDFileAbsDir", 19);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::DocumentationSettings::_get_TimingFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_e5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  tcd->result = impl->TimingFilesRelDir();


}

char* STI::Client_Server::_objref_DocumentationSettings::TimingFilesRelDir()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e5000000, "_get_TimingFilesRelDir", 23);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::DocumentationSettings::_set_TimingFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_f5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->TimingFilesRelDir(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::TimingFilesRelDir(const char* _v)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f5000000, "_set_TimingFilesRelDir", 23);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::DocumentationSettings::_get_DataFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_06000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  tcd->result = impl->DataFilesRelDir();


}

char* STI::Client_Server::_objref_DocumentationSettings::DataFilesRelDir()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_06000000, "_get_DataFilesRelDir", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::DocumentationSettings::_set_DataFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_16000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->DataFilesRelDir(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::DataFilesRelDir(const char* _v)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_16000000, "_set_DataFilesRelDir", 21);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::DocumentationSettings::_get_ExperimentFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_26000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  tcd->result = impl->ExperimentFilesRelDir();


}

char* STI::Client_Server::_objref_DocumentationSettings::ExperimentFilesRelDir()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_26000000, "_get_ExperimentFilesRelDir", 27);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::DocumentationSettings::_set_ExperimentFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_36000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->ExperimentFilesRelDir(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::ExperimentFilesRelDir(const char* _v)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_36000000, "_set_ExperimentFilesRelDir", 27);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::DocumentationSettings::_get_SequenceFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_46000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_11000000* tcd = (_0RL_cd_a900cfa937059cb8_11000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  tcd->result = impl->SequenceFilesRelDir();


}

char* STI::Client_Server::_objref_DocumentationSettings::SequenceFilesRelDir()
{
  _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_46000000, "_get_SequenceFilesRelDir", 25);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::DocumentationSettings::_set_SequenceFilesRelDir

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_56000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->SequenceFilesRelDir(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::SequenceFilesRelDir(const char* _v)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_56000000, "_set_SequenceFilesRelDir", 25);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::DocumentationSettings::setSequenceDescription

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_66000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_DocumentationSettings* impl = (STI::Client_Server::_impl_DocumentationSettings*) svnt->_ptrToInterface(STI::Client_Server::DocumentationSettings::_PD_repoId);
  impl->setSequenceDescription(tcd->arg_0);


}

void STI::Client_Server::_objref_DocumentationSettings::setSequenceDescription(const char* seqDescription)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_66000000, "setSequenceDescription", 23);
  _call_desc.arg_0 = seqDescription;

  _invoke(_call_desc);



}

STI::Client_Server::_pof_DocumentationSettings::~_pof_DocumentationSettings() {}


omniObjRef*
STI::Client_Server::_pof_DocumentationSettings::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_DocumentationSettings(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_DocumentationSettings::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::DocumentationSettings::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_DocumentationSettings _the_pof_STI_mClient__Server_mDocumentationSettings;

STI::Client_Server::_impl_DocumentationSettings::~_impl_DocumentationSettings() {}


::CORBA::Boolean
STI::Client_Server::_impl_DocumentationSettings::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_DocumentationBaseAbsDir")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_95000000, "_get_DocumentationBaseAbsDir", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_DocumentationBaseAbsDir")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b5000000, "_set_DocumentationBaseAbsDir", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_DTDFileAbsDir")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c5000000, "_get_DTDFileAbsDir", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_DTDFileAbsDir")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_d5000000, "_set_DTDFileAbsDir", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_TimingFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e5000000, "_get_TimingFilesRelDir", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_TimingFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_f5000000, "_set_TimingFilesRelDir", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_DataFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_06000000, "_get_DataFilesRelDir", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_DataFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_16000000, "_set_DataFilesRelDir", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_ExperimentFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_26000000, "_get_ExperimentFilesRelDir", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_ExperimentFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_36000000, "_set_ExperimentFilesRelDir", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_SequenceFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_11000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_46000000, "_get_SequenceFilesRelDir", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_set_SequenceFilesRelDir")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_56000000, "_set_SequenceFilesRelDir", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setSequenceDescription")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_66000000, "setSequenceDescription", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_DocumentationSettings::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::DocumentationSettings::_PD_repoId)
    return (::STI::Client_Server::_impl_DocumentationSettings*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::DocumentationSettings::_PD_repoId))
    return (::STI::Client_Server::_impl_DocumentationSettings*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_DocumentationSettings::_mostDerivedRepoId()
{
  return ::STI::Client_Server::DocumentationSettings::_PD_repoId;
}

STI::Client_Server::RegisteredDevices_ptr STI::Client_Server::RegisteredDevices_Helper::_nil() {
  return ::STI::Client_Server::RegisteredDevices::_nil();
}

::CORBA::Boolean STI::Client_Server::RegisteredDevices_Helper::is_nil(::STI::Client_Server::RegisteredDevices_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::RegisteredDevices_Helper::release(::STI::Client_Server::RegisteredDevices_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::RegisteredDevices_Helper::marshalObjRef(::STI::Client_Server::RegisteredDevices_ptr obj, cdrStream& s) {
  ::STI::Client_Server::RegisteredDevices::_marshalObjRef(obj, s);
}

STI::Client_Server::RegisteredDevices_ptr STI::Client_Server::RegisteredDevices_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::RegisteredDevices::_unmarshalObjRef(s);
}

void STI::Client_Server::RegisteredDevices_Helper::duplicate(::STI::Client_Server::RegisteredDevices_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::RegisteredDevices_ptr
STI::Client_Server::RegisteredDevices::_duplicate(::STI::Client_Server::RegisteredDevices_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::RegisteredDevices_ptr
STI::Client_Server::RegisteredDevices::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::RegisteredDevices_ptr
STI::Client_Server::RegisteredDevices::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::RegisteredDevices_ptr
STI::Client_Server::RegisteredDevices::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_RegisteredDevices _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_RegisteredDevices* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_RegisteredDevices;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::RegisteredDevices::_PD_repoId = "IDL:STI/Client_Server/RegisteredDevices:1.0";


STI::Client_Server::_objref_RegisteredDevices::~_objref_RegisteredDevices() {
  
}


STI::Client_Server::_objref_RegisteredDevices::_objref_RegisteredDevices(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::RegisteredDevices::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_RegisteredDevices::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::RegisteredDevices::_PD_repoId)
    return (::STI::Client_Server::RegisteredDevices_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::RegisteredDevices::_PD_repoId))
    return (::STI::Client_Server::RegisteredDevices_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::RegisteredDevices::_get_devices

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTDeviceSeq
class _0RL_cd_a900cfa937059cb8_76000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_76000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  STI::Types::TDeviceSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_76000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TDeviceSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_76000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TDeviceSeq;
  (STI::Types::TDeviceSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_76000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_86000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_76000000* tcd = (_0RL_cd_a900cfa937059cb8_76000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->devices();


}

STI::Types::TDeviceSeq* STI::Client_Server::_objref_RegisteredDevices::devices()
{
  _0RL_cd_a900cfa937059cb8_76000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_86000000, "_get_devices", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::RegisteredDevices::getDeviceAttributes

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTAttributeSeq_i_cstring
class _0RL_cd_a900cfa937059cb8_96000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_96000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI::Types::TAttributeSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_96000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_96000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_96000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TAttributeSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_96000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TAttributeSeq;
  (STI::Types::TAttributeSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_96000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_a6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_96000000* tcd = (_0RL_cd_a900cfa937059cb8_96000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->getDeviceAttributes(tcd->arg_0);


}

STI::Types::TAttributeSeq* STI::Client_Server::_objref_RegisteredDevices::getDeviceAttributes(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_96000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a6000000, "getDeviceAttributes", 20);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::RegisteredDevices::setDeviceAttribute

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cstring
class _0RL_cd_a900cfa937059cb8_b6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_b6000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_b6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_a900cfa937059cb8_b6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_a900cfa937059cb8_b6000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_b6000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_b6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_c6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_b6000000* tcd = (_0RL_cd_a900cfa937059cb8_b6000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->setDeviceAttribute(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI::Client_Server::_objref_RegisteredDevices::setDeviceAttribute(const char* deviceID, const char* key, const char* value)
{
  _0RL_cd_a900cfa937059cb8_b6000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c6000000, "setDeviceAttribute", 19);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = key;
  _call_desc.arg_2 = value;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::RegisteredDevices::setDeviceChannelName

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cshort_i_cstring
class _0RL_cd_a900cfa937059cb8_d6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_d6000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Short arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_d6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  _n.marshalString(arg_2,0);

}

void _0RL_cd_a900cfa937059cb8_d6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Short&)arg_1 <<= _n;
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_a900cfa937059cb8_d6000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_d6000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_d6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_e6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_d6000000* tcd = (_0RL_cd_a900cfa937059cb8_d6000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->setDeviceChannelName(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean STI::Client_Server::_objref_RegisteredDevices::setDeviceChannelName(const char* deviceID, ::CORBA::Short channel, const char* name)
{
  _0RL_cd_a900cfa937059cb8_d6000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e6000000, "setDeviceChannelName", 21);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = channel;
  _call_desc.arg_2 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::RegisteredDevices::getDeviceChannels

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTChannelSeq_i_cstring
class _0RL_cd_a900cfa937059cb8_f6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_f6000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI::Types::TChannelSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_f6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_f6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_f6000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TChannelSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_f6000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TChannelSeq;
  (STI::Types::TChannelSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_f6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_07000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_f6000000* tcd = (_0RL_cd_a900cfa937059cb8_f6000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->getDeviceChannels(tcd->arg_0);


}

STI::Types::TChannelSeq* STI::Client_Server::_objref_RegisteredDevices::getDeviceChannels(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_f6000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_07000000, "getDeviceChannels", 18);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::RegisteredDevices::getDevicePartners

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTPartnerSeq_i_cstring
class _0RL_cd_a900cfa937059cb8_17000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_17000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI::Types::TPartnerSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_17000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_17000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_17000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TPartnerSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_17000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TPartnerSeq;
  (STI::Types::TPartnerSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_17000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_27000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_17000000* tcd = (_0RL_cd_a900cfa937059cb8_17000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->getDevicePartners(tcd->arg_0);


}

STI::Types::TPartnerSeq* STI::Client_Server::_objref_RegisteredDevices::getDevicePartners(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_17000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_27000000, "getDevicePartners", 18);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::RegisteredDevices::getLabledData

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTLabeledData_i_cstring_i_cstring
class _0RL_cd_a900cfa937059cb8_37000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_37000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  STI::Types::TLabeledData_var result;
};

void _0RL_cd_a900cfa937059cb8_37000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a900cfa937059cb8_37000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a900cfa937059cb8_37000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TLabeledData&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_37000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TLabeledData;
  (STI::Types::TLabeledData&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_37000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_47000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_37000000* tcd = (_0RL_cd_a900cfa937059cb8_37000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->getLabledData(tcd->arg_0, tcd->arg_1);


}

STI::Types::TLabeledData* STI::Client_Server::_objref_RegisteredDevices::getLabledData(const char* deviceID, const char* label)
{
  _0RL_cd_a900cfa937059cb8_37000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_47000000, "getLabledData", 14);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = label;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::RegisteredDevices::deviceStatus

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_57000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_22000000* tcd = (_0RL_cd_a900cfa937059cb8_22000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->deviceStatus(tcd->arg_0);


}

::CORBA::Boolean STI::Client_Server::_objref_RegisteredDevices::deviceStatus(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_57000000, "deviceStatus", 13);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::RegisteredDevices::devicePing

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring
class _0RL_cd_a900cfa937059cb8_67000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_67000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_a900cfa937059cb8_67000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_67000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_67000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_67000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_67000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_77000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_67000000* tcd = (_0RL_cd_a900cfa937059cb8_67000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  tcd->result = impl->devicePing(tcd->arg_0);


}

::CORBA::Long STI::Client_Server::_objref_RegisteredDevices::devicePing(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_67000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_77000000, "devicePing", 11);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::RegisteredDevices::refreshDevices

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_87000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  impl->refreshDevices();


}

void STI::Client_Server::_objref_RegisteredDevices::refreshDevices()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_87000000, "refreshDevices", 15);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::RegisteredDevices::stopRefreshing

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_97000000(omniCallDescriptor*, omniServant* svnt)
{
  
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  impl->stopRefreshing();


}

void STI::Client_Server::_objref_RegisteredDevices::stopRefreshing()
{
  _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_97000000, "stopRefreshing", 15);


  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::RegisteredDevices::stopDevice

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_a7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  impl->stopDevice(tcd->arg_0);


}

void STI::Client_Server::_objref_RegisteredDevices::stopDevice(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a7000000, "stopDevice", 11);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);



}


//
// Code for STI::Client_Server::RegisteredDevices::killDevice

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_b7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a5000000* tcd = (_0RL_cd_a900cfa937059cb8_a5000000*)cd;
  STI::Client_Server::_impl_RegisteredDevices* impl = (STI::Client_Server::_impl_RegisteredDevices*) svnt->_ptrToInterface(STI::Client_Server::RegisteredDevices::_PD_repoId);
  impl->killDevice(tcd->arg_0);


}

void STI::Client_Server::_objref_RegisteredDevices::killDevice(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b7000000, "killDevice", 11);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);



}

STI::Client_Server::_pof_RegisteredDevices::~_pof_RegisteredDevices() {}


omniObjRef*
STI::Client_Server::_pof_RegisteredDevices::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_RegisteredDevices(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_RegisteredDevices::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::RegisteredDevices::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_RegisteredDevices _the_pof_STI_mClient__Server_mRegisteredDevices;

STI::Client_Server::_impl_RegisteredDevices::~_impl_RegisteredDevices() {}


::CORBA::Boolean
STI::Client_Server::_impl_RegisteredDevices::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_devices")) {

    _0RL_cd_a900cfa937059cb8_76000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_86000000, "_get_devices", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getDeviceAttributes")) {

    _0RL_cd_a900cfa937059cb8_96000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a6000000, "getDeviceAttributes", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setDeviceAttribute")) {

    _0RL_cd_a900cfa937059cb8_b6000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c6000000, "setDeviceAttribute", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setDeviceChannelName")) {

    _0RL_cd_a900cfa937059cb8_d6000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e6000000, "setDeviceChannelName", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getDeviceChannels")) {

    _0RL_cd_a900cfa937059cb8_f6000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_07000000, "getDeviceChannels", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getDevicePartners")) {

    _0RL_cd_a900cfa937059cb8_17000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_27000000, "getDevicePartners", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLabledData")) {

    _0RL_cd_a900cfa937059cb8_37000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_47000000, "getLabledData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "deviceStatus")) {

    _0RL_cd_a900cfa937059cb8_22000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_57000000, "deviceStatus", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "devicePing")) {

    _0RL_cd_a900cfa937059cb8_67000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_77000000, "devicePing", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "refreshDevices")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_87000000, "refreshDevices", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "stopRefreshing")) {

    _0RL_cd_a900cfa937059cb8_71000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_97000000, "stopRefreshing", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "stopDevice")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_a7000000, "stopDevice", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "killDevice")) {

    _0RL_cd_a900cfa937059cb8_a5000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_b7000000, "killDevice", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_RegisteredDevices::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::RegisteredDevices::_PD_repoId)
    return (::STI::Client_Server::_impl_RegisteredDevices*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::RegisteredDevices::_PD_repoId))
    return (::STI::Client_Server::_impl_RegisteredDevices*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_RegisteredDevices::_mostDerivedRepoId()
{
  return ::STI::Client_Server::RegisteredDevices::_PD_repoId;
}

STI::Client_Server::ServerCommandLine_ptr STI::Client_Server::ServerCommandLine_Helper::_nil() {
  return ::STI::Client_Server::ServerCommandLine::_nil();
}

::CORBA::Boolean STI::Client_Server::ServerCommandLine_Helper::is_nil(::STI::Client_Server::ServerCommandLine_ptr p) {
  return ::CORBA::is_nil(p);

}

void STI::Client_Server::ServerCommandLine_Helper::release(::STI::Client_Server::ServerCommandLine_ptr p) {
  ::CORBA::release(p);
}

void STI::Client_Server::ServerCommandLine_Helper::marshalObjRef(::STI::Client_Server::ServerCommandLine_ptr obj, cdrStream& s) {
  ::STI::Client_Server::ServerCommandLine::_marshalObjRef(obj, s);
}

STI::Client_Server::ServerCommandLine_ptr STI::Client_Server::ServerCommandLine_Helper::unmarshalObjRef(cdrStream& s) {
  return ::STI::Client_Server::ServerCommandLine::_unmarshalObjRef(s);
}

void STI::Client_Server::ServerCommandLine_Helper::duplicate(::STI::Client_Server::ServerCommandLine_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

STI::Client_Server::ServerCommandLine_ptr
STI::Client_Server::ServerCommandLine::_duplicate(::STI::Client_Server::ServerCommandLine_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

STI::Client_Server::ServerCommandLine_ptr
STI::Client_Server::ServerCommandLine::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


STI::Client_Server::ServerCommandLine_ptr
STI::Client_Server::ServerCommandLine::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

STI::Client_Server::ServerCommandLine_ptr
STI::Client_Server::ServerCommandLine::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ServerCommandLine _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ServerCommandLine* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ServerCommandLine;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* STI::Client_Server::ServerCommandLine::_PD_repoId = "IDL:STI/Client_Server/ServerCommandLine:1.0";


STI::Client_Server::_objref_ServerCommandLine::~_objref_ServerCommandLine() {
  
}


STI::Client_Server::_objref_ServerCommandLine::_objref_ServerCommandLine(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::STI::Client_Server::ServerCommandLine::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
STI::Client_Server::_objref_ServerCommandLine::_ptrToObjRef(const char* id)
{
  if (id == ::STI::Client_Server::ServerCommandLine::_PD_repoId)
    return (::STI::Client_Server::ServerCommandLine_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::STI::Client_Server::ServerCommandLine::_PD_repoId))
    return (::STI::Client_Server::ServerCommandLine_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for STI::Client_Server::ServerCommandLine::deviceCmdName

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_c7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_a4000000* tcd = (_0RL_cd_a900cfa937059cb8_a4000000*)cd;
  STI::Client_Server::_impl_ServerCommandLine* impl = (STI::Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI::Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->deviceCmdName(tcd->arg_0);


}

char* STI::Client_Server::_objref_ServerCommandLine::deviceCmdName(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_a4000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c7000000, "deviceCmdName", 14);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ServerCommandLine::executeArgs

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_i_cstring
class _0RL_cd_a900cfa937059cb8_d7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_d7000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var result;
};

void _0RL_cd_a900cfa937059cb8_d7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a900cfa937059cb8_d7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a900cfa937059cb8_d7000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_a900cfa937059cb8_d7000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_a900cfa937059cb8_d7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_e7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_d7000000* tcd = (_0RL_cd_a900cfa937059cb8_d7000000*)cd;
  STI::Client_Server::_impl_ServerCommandLine* impl = (STI::Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI::Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->executeArgs(tcd->arg_0, tcd->arg_1);


}

char* STI::Client_Server::_objref_ServerCommandLine::executeArgs(const char* deviceID, const char* args)
{
  _0RL_cd_a900cfa937059cb8_d7000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e7000000, "executeArgs", 12);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = args;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ServerCommandLine::writeChannel

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cunsigned_pshort_i_cSTI_mTypes_mTValMixed
class _0RL_cd_a900cfa937059cb8_f7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_f7000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::UShort arg_1;
  STI::Types::TValMixed_var arg_2_;
  const STI::Types::TValMixed* arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_f7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  (const STI::Types::TValMixed&) *arg_2 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_f7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::UShort&)arg_1 <<= _n;
  arg_2_ = new STI::Types::TValMixed;
  (STI::Types::TValMixed&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_a900cfa937059cb8_f7000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a900cfa937059cb8_f7000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a900cfa937059cb8_f7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_08000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_f7000000* tcd = (_0RL_cd_a900cfa937059cb8_f7000000*)cd;
  STI::Client_Server::_impl_ServerCommandLine* impl = (STI::Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI::Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->writeChannel(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

::CORBA::Boolean STI::Client_Server::_objref_ServerCommandLine::writeChannel(const char* deviceID, ::CORBA::UShort channel, const ::STI::Types::TValMixed& value)
{
  _0RL_cd_a900cfa937059cb8_f7000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_08000000, "writeChannel", 13);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = channel;
  _call_desc.arg_2 = &(::STI::Types::TValMixed&) value;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ServerCommandLine::readChannel

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cunsigned_pshort_i_cSTI_mTypes_mTValMixed_o_cSTI_mTypes_mTDataMixed
class _0RL_cd_a900cfa937059cb8_18000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_18000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::UShort arg_1;
  STI::Types::TValMixed_var arg_2_;
  const STI::Types::TValMixed* arg_2;
  STI::Types::TDataMixed_var arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_a900cfa937059cb8_18000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  (const STI::Types::TValMixed&) *arg_2 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_18000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::UShort&)arg_1 <<= _n;
  arg_2_ = new STI::Types::TValMixed;
  (STI::Types::TValMixed&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_a900cfa937059cb8_18000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const STI::Types::TDataMixed&) arg_3 >>= _n;

}

void _0RL_cd_a900cfa937059cb8_18000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_3 = new STI::Types::TDataMixed;
  (STI::Types::TDataMixed&)arg_3 <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_18000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_28000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_18000000* tcd = (_0RL_cd_a900cfa937059cb8_18000000*)cd;
  STI::Client_Server::_impl_ServerCommandLine* impl = (STI::Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI::Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->readChannel(tcd->arg_0, tcd->arg_1, *tcd->arg_2, tcd->arg_3.out());


}

::CORBA::Boolean STI::Client_Server::_objref_ServerCommandLine::readChannel(const char* deviceID, ::CORBA::UShort channel, const ::STI::Types::TValMixed& value, ::STI::Types::TDataMixed_out data)
{
  _0RL_cd_a900cfa937059cb8_18000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_28000000, "readChannel", 12);
  _call_desc.arg_0 = deviceID;
  _call_desc.arg_1 = channel;
  _call_desc.arg_2 = &(::STI::Types::TValMixed&) value;

  _invoke(_call_desc);
  data = _call_desc.arg_3._retn();
  return _call_desc.result;


}


//
// Code for STI::Client_Server::ServerCommandLine::registeredPartners

// Proxy call descriptor class. Mangled signature:
//  _cSTI_mTypes_mTStringSeq_i_cstring
class _0RL_cd_a900cfa937059cb8_38000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a900cfa937059cb8_38000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  STI::Types::TStringSeq_var result;
};

void _0RL_cd_a900cfa937059cb8_38000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a900cfa937059cb8_38000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a900cfa937059cb8_38000000::marshalReturnedValues(cdrStream& _n)
{
  (const STI::Types::TStringSeq&) result >>= _n;

}

void _0RL_cd_a900cfa937059cb8_38000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new STI::Types::TStringSeq;
  (STI::Types::TStringSeq&)result <<= _n;

}

const char* const _0RL_cd_a900cfa937059cb8_38000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_48000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_38000000* tcd = (_0RL_cd_a900cfa937059cb8_38000000*)cd;
  STI::Client_Server::_impl_ServerCommandLine* impl = (STI::Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI::Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->registeredPartners(tcd->arg_0);


}

STI::Types::TStringSeq* STI::Client_Server::_objref_ServerCommandLine::registeredPartners(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_38000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_48000000, "registeredPartners", 19);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for STI::Client_Server::ServerCommandLine::requiredPartners

// Local call call-back function.
static void
_0RL_lcfn_a900cfa937059cb8_58000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a900cfa937059cb8_38000000* tcd = (_0RL_cd_a900cfa937059cb8_38000000*)cd;
  STI::Client_Server::_impl_ServerCommandLine* impl = (STI::Client_Server::_impl_ServerCommandLine*) svnt->_ptrToInterface(STI::Client_Server::ServerCommandLine::_PD_repoId);
  tcd->result = impl->requiredPartners(tcd->arg_0);


}

STI::Types::TStringSeq* STI::Client_Server::_objref_ServerCommandLine::requiredPartners(const char* deviceID)
{
  _0RL_cd_a900cfa937059cb8_38000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_58000000, "requiredPartners", 17);
  _call_desc.arg_0 = deviceID;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

STI::Client_Server::_pof_ServerCommandLine::~_pof_ServerCommandLine() {}


omniObjRef*
STI::Client_Server::_pof_ServerCommandLine::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::STI::Client_Server::_objref_ServerCommandLine(ior, id);
}


::CORBA::Boolean
STI::Client_Server::_pof_ServerCommandLine::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::STI::Client_Server::ServerCommandLine::_PD_repoId))
    return 1;
  
  return 0;
}

const STI::Client_Server::_pof_ServerCommandLine _the_pof_STI_mClient__Server_mServerCommandLine;

STI::Client_Server::_impl_ServerCommandLine::~_impl_ServerCommandLine() {}


::CORBA::Boolean
STI::Client_Server::_impl_ServerCommandLine::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "deviceCmdName")) {

    _0RL_cd_a900cfa937059cb8_a4000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_c7000000, "deviceCmdName", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "executeArgs")) {

    _0RL_cd_a900cfa937059cb8_d7000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_e7000000, "executeArgs", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "writeChannel")) {

    _0RL_cd_a900cfa937059cb8_f7000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_08000000, "writeChannel", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "readChannel")) {

    _0RL_cd_a900cfa937059cb8_18000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_28000000, "readChannel", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "registeredPartners")) {

    _0RL_cd_a900cfa937059cb8_38000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_48000000, "registeredPartners", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "requiredPartners")) {

    _0RL_cd_a900cfa937059cb8_38000000 _call_desc(_0RL_lcfn_a900cfa937059cb8_58000000, "requiredPartners", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
STI::Client_Server::_impl_ServerCommandLine::_ptrToInterface(const char* id)
{
  if (id == ::STI::Client_Server::ServerCommandLine::_PD_repoId)
    return (::STI::Client_Server::_impl_ServerCommandLine*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::STI::Client_Server::ServerCommandLine::_PD_repoId))
    return (::STI::Client_Server::_impl_ServerCommandLine*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
STI::Client_Server::_impl_ServerCommandLine::_mostDerivedRepoId()
{
  return ::STI::Client_Server::ServerCommandLine::_PD_repoId;
}

POA_STI::Client_Server::ClientBootstrap::~ClientBootstrap() {}

POA_STI::Client_Server::ModeInterrupt::~ModeInterrupt() {}

POA_STI::Client_Server::ModeHandler::~ModeHandler() {}

POA_STI::Client_Server::Parser::~Parser() {}

POA_STI::Client_Server::ExpSequence::~ExpSequence() {}

POA_STI::Client_Server::ServerTimingSeqControl::~ServerTimingSeqControl() {}

POA_STI::Client_Server::DocumentationSettings::~DocumentationSettings() {}

POA_STI::Client_Server::RegisteredDevices::~RegisteredDevices() {}

POA_STI::Client_Server::ServerCommandLine::~ServerCommandLine() {}

